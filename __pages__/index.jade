extend __core__/default
block content
	+panel().special.light.cf
		//- div#branding.cf
		//- 	img(src="/images/boy-scout-logo.jpg")
		//- 	div#troop Troop
		//- 	div#troopClassifiers
		//- 		div#troopNumber 1524
		//- 		div#tagline Nepali Boy Scouts
		div#loginModal.modal.window
			div.wrap.access-form
				form#login.logged-out-view
					h3 Login
					+email("Email", "required")
					+password("Password", "required")
					p.right-justify
						+button("Login").submit.logged-out-view
				div.logged-in-view
					p.center-justify Congratulations!  You are now logged in.
				p.logged-in-view.center-justify
					+button("Close").close-modal-alt
		div#logoutModal.modal.window
			div.wrap.logged-in-view
				p.center-justify Are you sure that you want to log out?
				p.center-justify
					+button("Confirm").logout
			div.wrap.logged-out-view
				p.center-justify You are successfully logged out!
				p.center-justify
					+button("Close").close-modal-alt
		div#modalWindow.modal.window
			+seg().half
				+max()
					h3 
				+min()
					div.requirement-status
			div.rank-content
			div#notesWrapper
				div#addNote.collapsible.trigger Add a note
				div.collapsible.drawer
					+seg().half
						+max()
							div#showNotes Notes
						+min()
							div.right-justify
								div#editNote Edit
					#currentNote
					#noteField
						+textarea()#noteTextarea
						div.form-element
							+button("Save").right.add-note
							//- div.right.note-saved-message Your note has been saved
		div#scoutWrapper
			div#selectAll Batch
			div#keysTrigger ?
			- var scoutName = ["Praval", "Romil", "Thirtha", "Ashis", "Raja", "Aiman", "Shishant", "Samuel"]
			- var i = 0
			- var count = scoutName.length
			+loop(count)
					div.scout
						div.name(data-name= scoutName[i])= scoutName[i]
						- i++
		div#progressWrapper
			div#shadowBarsWrapper
				- var i = 0
				+loop(count)
					div.shadow-progress-bar(data-owner= scoutName[i])
					- i++
			div#barsWrapper
				- var i = 0
				+loop(count)
					div.progress-bar.modal.trigger.cf(data-owner= scoutName[i], data-target="modalWindow")
					- i++
			div#rankWrapper.cf
				- rankName = ["Scout", "Tenderfoot", "Second Class", "First Class", "Star", "Life", "Eagle"]
				- var scoutProgress = [10, 100, 50, 25, 80]
				- var x = 0
				- var a = 0
				- var rankCount = rankName.length
				+loop(rankCount)
					div.rank(data-lane= rankName[x])
						h4.center-justify= rankName[x]
						- x++, a++
		div#shadowCast
	+panel().dark.footer
block script
	script(src="/js/scout-record-0.0.3.js")
	script.
		magicVial('form#signup', "Sorry, please fix the errors below.");
		
		$('form#signup [type="submit"]').click((e) => {
			e.preventDefault();
			var email = $('form#signup [type="email"]').val();
			var password = $('form#signup [type="password"]').val();
			firebase.auth().createUserWithEmailAndPassword(email, password).catch(function(error) {
				// Handle Errors here.
				var errorCode = error.code;
				var errorMessage = error.message;
				if (error.code) {
					alert("You have an error!");
				}
			});
		});
		
		$('.scout .name').click(function(e) {
			if ($('#selectAll').hasClass('show')) {
				$('#selectAll').removeClass('show');
				$('.scout .name').removeClass('selected');
				$('.shadow-progress-bar').removeClass('selected');
				$('.progress-bar').removeClass('selected');
				$(this).addClass('selected');
				$('[data-owner="'+ $(this).attr('data-name') +'"]').addClass('selected');
			}
			else if ($(this).hasClass('selected')) {
				$(this).removeClass('selected');
				$('.shadow-progress-bar').removeClass('selected');
				$('.progress-bar').removeClass('selected');
			}
			else {
				$('.scout .name').removeClass('selected');
				$('.shadow-progress-bar').removeClass('selected');
				$('.progress-bar').removeClass('selected');
				$(this).addClass('selected');
				$('[data-owner="'+ $(this).attr('data-name') +'"]').addClass('selected');
			}
		});
		$('#selectAll').click(function() {
			if ($(this).hasClass('show') && $('.scout .name.selected').length > 0) {
				$(this).removeClass('show');
				$('.scout .name').removeClass('selected');
				$('.shadow-progress-bar').removeClass('selected');
				$('.progress-bar').removeClass('selected');
			}
			else {
				$(this).addClass('show');
				$('.scout .name').addClass('selected');
				$('.shadow-progress-bar').addClass('selected');
				$('.progress-bar').addClass('selected');
			}
		});
		
		$('form').each(function() {
			magicVial('form#' + $(this).attr('id'), "Sorry, please fix the errors below.");
		});
		
		function sortKeys(obj) {
			var ordered = {};
			Object.keys(obj).sort().forEach(function(key) {
				ordered[key] = obj[key];
			});
			return ordered;
		}
		
		Object.size = function(obj) {
			var size = 0, key;
			for (key in obj) {
				if (obj.hasOwnProperty(key)) size++;
			}
			return size;
		};
		
		function compare(a,b) {
			let comparison = 0, x, y;

			if (a.match(/[a-z]/i) && b.match(/[a-z]/i)) {
				x = a;
				y = b;
			}
			else {
				x = parseInt(a.replace(/[a-z]/g, ''));
				y = parseInt(b.replace(/[a-z]/g, ''));
			}

			if (x > y) {
				comparison = 1;
			} else if (y > x) {
				comparison = -1;
			}

			return comparison;
		}
		
		$('#keysTrigger').click(function() {
			$(this).toggleClass('show');
			$('#progressWrapper').toggleClass('show-keys');
		});
		
		$('.modal-trigger').not('.completed').click(function() {
			e.preventDefault();
		});
		
		$('#progressWrapper').delegate('.fragment', 'click', function(e) {
			$('#notesWrapper').removeClass('edit-mode');
			var owner = $(this).parent().attr('data-owner');
			var rank = $(this).attr('data-rank');
			var requirement = $(this).attr('data-requirement');
			$('#modalWindow .requirement-status').attr('data-owner', owner);
			$('#modalWindow .requirement-status').attr('data-rank', rank);
			$('#modalWindow .requirement-status').attr('data-requirement', requirement);
			$('#modalWindow .requirement-status').removeClass('has-completed');
			$('#modalWindow .requirement-status').text('Mark as completed');
			if ($(this).hasClass('completed')) {
				$('#modalWindow .requirement-status').addClass('has-completed');
				$('#modalWindow .requirement-status').text('Completed');
			}
			var titleLayout = $(this).attr('data-rank') +' <span class="semi">'+ $(this).attr('data-requirement') +'</span>';
			$('#modalWindow h3').html(titleLayout);
			var desc = "";
			for (var i = 0; i < record.ranks.length; i++) {
				if (record.ranks[i].name === rank) {
					desc = record.ranks[i].requirements[requirement];
					break;
				}
			}
			$('#modalWindow .rank-content').html(desc);
			if ($('#selectAll').hasClass('show')) {
				if ($(this).hasClass('completed')) {
					$(this).removeClass('completed');
				}
				else {
					$(this).addClass('completed');
				}
				toggleRequirement(window.dataObj, owner, rank, requirement);
				writeUserData(window.database, window.dataObj);
			}
			var keyString = rank.replace(" ", "") + "_" + requirement;
			var $fragment = $('[data-owner="'+ owner +'"] .fragment[data-rank="'+ rank +'"][data-requirement="'+ requirement +'"]');
			if ($($fragment).hasClass('editing')) {
				$('#notesWrapper').addClass('edit-mode');
			}
			for (var i = 0; i < window.dataObj.length; i++) {
		    if (window.dataObj[i].name === owner) {
		      window.dataObj[i].ranks.forEach(function(_rank_) {
		        if (_rank_.name === rank) {
		          if ('notes' in _rank_) {
								if (keyString in _rank_.notes) {
									var note = _rank_.notes[keyString];
									$('#notesWrapper').addClass('has-note');
									$('#currentNote').text(note);
									$('#noteTextarea').val(note);
									$('#notesWrapper .collapsible.drawer').css('display', 'block');
								} else {
									$('#notesWrapper').removeClass('has-note');
									$('#currentNote').text("");
									$('#noteTextarea').val("");
									$('#notesWrapper .collapsible.drawer').css('display', 'none');
								}
							}
		        }
		      });
		      continue;
		    }
		  }
		});
		
		//- $('body').delegate('.requirement-status', 'click', function() {
		//- 	console.log('tesdting')
		//- 	if (!$(this).not('.has-completed')) {
		//- 		$(this).addClass('has-completed');
		//- 		$(this).text('Completed');
		//- 	}
		//- });
