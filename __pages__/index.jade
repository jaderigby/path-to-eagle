extend __core__/default
block content
	+panel().light.cf
		div#scoutWrapper
			- var scoutName = ["Praval", "Romil", "Thirtha", "Ashis", "Raja", "Aiman", "Shishant"]
			- var i = 0
			- var count = scoutName.length
			+loop(count)
					div.scout
						div.name(data-name= scoutName[i])= scoutName[i]
						- i++
		div#progressWrapper
			div#shadowBarsWrapper
				- var i = 0
				+loop(count)
					div.shadow-progress-bar(data-owner= scoutName[i])
					- i++
			div#barsWrapper
				- var i = 0
				+loop(count)
					div.progress-bar.cf(data-owner= scoutName[i])
					- i++
			div#rankWrapper.cf
				- rankName = ["Scout", "Tenderfoot", "Second Class", "First Class", "Star", "Life", "Eagle"]
				- var scoutProgress = [10, 100, 50, 25, 80]
				- var x = 0
				- var a = 0
				- var rankCount = rankName.length
				+loop(rankCount)
					div.rank(data-lane= rankName[x])
						h4.center-justify= rankName[x]
						- x++, a++
	+panel().dark.footer
block script
	script(src="https://www.gstatic.com/firebasejs/5.0.4/firebase.js")
	script(src="/js/scout-record-0.0.1.js")
	script.
		// Initialize Firebase
		var config = {
			apiKey: "AIzaSyDX2dGX41G6pEKq4AOjnM4sdrVMs0bGJzM",
			authDomain: "path-to-eagle.firebaseapp.com",
			databaseURL: "https://path-to-eagle.firebaseio.com",
			projectId: "path-to-eagle",
			storageBucket: "path-to-eagle.appspot.com",
			messagingSenderId: "331583012361"
		};
		firebase.initializeApp(config);
		
		
		$('.scout .name').click(function(e) {
			if ($(this).hasClass('selected')) {
				$(this).removeClass('selected');
				$('.shadow-progress-bar').removeClass('selected');
				$('.progress-bar').removeClass('selected');
			}
			else {
				$('.scout .name').removeClass('selected');
				$('.shadow-progress-bar').removeClass('selected');
				$('.progress-bar').removeClass('selected');
				$(this).addClass('selected');
				$('[data-owner="'+ $(this).attr('data-name') +'"]').addClass('selected');
			}
		});
		$('form').each(function() {
			magicVial('form#' + $(this).attr('id'), "Sorry, please fix the errors below.");
		});
		
		function sortKeys(obj) {
			var ordered = {};
			Object.keys(obj).sort().forEach(function(key) {
				ordered[key] = obj[key];
			});
			return ordered;
		}
		
		Object.size = function(obj) {
			var size = 0, key;
			for (key in obj) {
				if (obj.hasOwnProperty(key)) size++;
			}
			return size;
		};
		
		function compare(a,b) {
			let comparison = 0, x, y;

			if (a.match(/[a-z]/i) && b.match(/[a-z]/i)) {
				x = a;
				y = b;
			}
			else {
				x = parseInt(a.replace(/[a-z]/g, ''));
				y = parseInt(b.replace(/[a-z]/g, ''));
			}

			if (x > y) {
				comparison = 1;
			} else if (y > x) {
				comparison = -1;
			}

			return comparison;
		}
		
		function initBarFragments() {
			var progressBarBuild = [];
			record.ranks.forEach(function(_rank_) {
				var size = Object.keys(_rank_.requirements).length;
				var fragmentWidth = 15;
				var requirementsList = [];
				for (var key in _rank_.requirements) {
					requirementsList.push(key);
				}
				//- console.log("before: ", requirementsList);
				requirementsList.sort(compare);
				//- console.log(requirementsList);
				//- console.log("after: ", requirementsList);
				requirementsList.forEach(function(_requirement_) {
					progressBarBuild.push(`<div style="width: ${fragmentWidth}px" class="fragment" data-rank="${_rank_.name}" data-requirement="${_requirement_}"></div>`);
				})
			});
			return progressBarBuild;
		}

		function initMemberBars(memberBarList) {
			record.members.forEach(function(_boy_) {
				memberBarList.forEach(function(_fragment_) {
					$('[data-owner="'+ _boy_.name +'"].progress-bar').append(_fragment_);
				});
			});
		}
		
		function initMarkedBars() {
			record.members.forEach(function(_boy_) {
				_boy_.ranks.forEach(function(_rank_) {
					//- console.log(_rank_.requirements);
					_rank_.requirements.forEach(function(_requirement_) {
						//- console.log("name: ", _boy_.name, " rank: ", _rank_.name, "completed: ", _requirement_);
						$('[data-owner="'+ _boy_.name +'"] [data-rank="'+ _rank_.name +'"][data-requirement="'+ _requirement_ +'"]').addClass('completed');
					});
				});
			});
		}
		
		function initRankSeparators() {
			var total = 0;
			record.ranks.forEach(function(_rank_) {
					$('[data-lane="'+ _rank_.name +'"]').css('width', function() {
						//- console.log(_rank_.requirements);
						var size = Object.size(_rank_.requirements);
						var calcWidth = 15 * size;
						total += calcWidth;
						return calcWidth + "px";
						});
				});
			$('#rankWrapper').css('width', total + 0 + "px");
			$('.shadow-progress-bar, .progress-bar').css('width', total + "px");
		}
		
		var barFragments = initBarFragments();
		//- console.log(barFragments);
		initMemberBars(barFragments);
		initMarkedBars();
		initRankSeparators();
		
		$('#barsWrapper').delegate('.selected .fragment', 'click', function(e) {
			var rank = $(this).attr('data-rank');
			var requirement = $(this).attr('data-requirement');
			var desc = "";
			for (var i = 0; i < record.ranks.length; i++) {
				if (record.ranks[i].name === rank) {
					desc = record.ranks[i].requirements[requirement];
					break;
				}
			}
			alert(rank +": "+ requirement +"\n"+ desc);
		})
		
		
		//- 
		//- record.members.forEach(function(_boy_) {
		//- 	_boy_.ranks.forEach(function(_rank_) {
		//- 		_rank_.forEach(function(_requirement_) {
		//- 			$('[data-owner="'+ _boy_ +'"] [data-rank="'+ _rank_ +'"][data-requirement="'+ _requirement_ +'"]').addClass('completed');
		//- 		});
		//- 	});
		//- });
